kind: ConfigMap
apiVersion: v1
metadata:
  name: ca
  namespace: kube-system
data:
  ca.pem: |
    -----BEGIN CERTIFICATE-----
    MIIDFjCCAf6gAwIBAgIJAP2kT/jemKFVMA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNV
    BAMMFWRleC5rOHMuc2hvdC54MzQwLm9yZzAeFw0xODEyMjYxMTA0MThaFw0yODEy
    MjMxMTA0MThaMCAxHjAcBgNVBAMMFWRleC5rOHMuc2hvdC54MzQwLm9yZzCCASIw
    DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALGVCOrJpaE1ghYivEi2SvQ3bLb8
    QjFsSgnzNg0+K85Sn84C1E3UAW+bK0f7Dp/4+R4o2GvkvjnHZsYA6g8fQTcGZXWp
    D6eiw4iSl+/bEKnCDuWniKgEHKxdL+a0eZcJhR+XCWTLJmcHHKJeGTJEoIfYBq7a
    HhIJDkwXeXwTePbssZltKZw/yqNX+5MDtEGD2anaSkn1oDXOCjA/uRD6pQKGKUyM
    GNXHVj9jXGqEcQa99KiNKLqxBV6xDcOkKYFJcq4LICJTLioLU+o1x6CFUBx4wi64
    Q/+hBDku+GJcyzTYyqJwKIfsL1w4fw1qFo6/r7UGZjVG6PJmgKigJMBVhFkCAwEA
    AaNTMFEwHQYDVR0OBBYEFBYMoeIbIw8r5ew0ZwoRFW9pnrIjMB8GA1UdIwQYMBaA
    FBYMoeIbIw8r5ew0ZwoRFW9pnrIjMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcN
    AQELBQADggEBADHG0GlBw0CQbxaWnyLAdPNl1dooy413N4wsLELs6U3wsg0RTWgw
    z2H1Z/PW8ZOEMlosJdaqoogUquds0cK6kIqXb8okhvK40aBFAEaMMb5AXF8CL3LO
    D6md3TYclrVXZL0dH6idDPunA0BB31K1rmjDkboSYtMe0uj0/guxjal8InUvCVoP
    iiu5IAmck6yrtyGU3L+BMZHOmS2EmanK9g26O672m01i6olNPtnxXWQai8x3xeYC
    51PRusN8O/48XiSeG+yPhZ4iV6iwqFwztTXDkBKP8xRcluJnX83WodkAR3yYkHm5
    cqB5A6u7v/F+CyuLrpYCN79UAG/IrUDNdH0=
    -----END CERTIFICATE-----
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: loginapp
  namespace: kube-system
data:
  config.yaml: |
    debug: false
    client_id: "loginapp"
    client_secret: 4TORGiNV9M54BTk1v7dNuFSaI6hUjfjr
    issuer_url: "https://dex.k8s.shot.x340.org:32000/dex"
    issuer_root_ca: "/etc/ssl/ca.pem"
    redirect_url: "https://login.k8s.shot.x340.org:32002/callback"
    listen: "https://0.0.0.0:5555"
    tls_cert: "/etc/loginapp/tls/tls.crt"
    tls_key: "/etc/loginapp/tls/tls.key"
    disable_choices: false
    extra_scopes: "groups"
    app_name: "Kubernetes Auth"
---
apiVersion: v1
kind: Service
metadata:
  name: loginapp
  namespace: kube-system
spec:
  type: NodePort
  ports:
    - name: loginapp
      port: 5555
      protocol: TCP
      targetPort: 5555
      nodePort: 32002
  selector:
    app: loginapp
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: loginapp
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: loginapp
    spec:
      nodeSelector:
        loginapp: present
      tolerations:
        - key: "type"
          operator: "Equal"
          value: "balancer"
          effect: "NoSchedule"
      containers:
        - image: objectiflibre/login-app:latest
          name: loginapp
          ports:
            - name: http
              containerPort: 5555
          volumeMounts:
            - name: ca
              mountPath: /etc/ssl/
            - name: config
              mountPath: /app/
            - name: tls
              mountPath: /etc/loginapp/tls
      volumes:
        - name: ca
          configMap:
            name: ca
            items:
              - key: ca.pem
                path: ca.pem
        - name: config
          configMap:
            name: loginapp
            items:
              - key: config.yaml
                path: config.yaml
        - name: tls
          secret:
            secretName: dex.k8s.shot.x340.org.tls
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: authcodes.dex.coreos.com
spec:
  group: dex.coreos.com
  names:
    kind: AuthCode
    listKind: AuthCodeList
    plural: authcodes
    singular: authcode
  scope: Namespaced
  version: v1
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: dex
rules:
  - apiGroups: ["dex.coreos.com"] # API group created by dex
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create"] # To manage its own resources identity must be able to create customresourcedefinitions.
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
  - kind: ServiceAccount
    name: dex                 # Service account assigned to the dex pod.
    namespace: kube-system           # The namespace dex is running in.
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex
  namespace: kube-system
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
  namespace: kube-system
data:
  config.yaml: |
    issuer: https://dex.k8s.shot.x340.org:32000/dex
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
    logger:
      level: "debug"
      format: text

    expiry:
       idTokens: "720h"

    connectors:
      - type: ldap
        # Required field for connector id.
        id: ldap
        # Required field for connector name.
        name: LDAP
        config:
          # Host and optional port of the LDAP server in the form "host:port".
          # If the port is not supplied, it will be guessed based on "insecureNoSSL",
          # and "startTLS" flags. 389 for insecure or StartTLS connections, 636
          # otherwise.
          host: ldap-ds01.x340.org:636

          # Following field is required if the LDAP host is not using TLS (port 389).
          # Because this option inherently leaks passwords to anyone on the same network
          # as dex, THIS OPTION MAY BE REMOVED WITHOUT WARNING IN A FUTURE RELEASE.
          #
          insecureNoSSL: false
          # If a custom certificate isn't provide, this option can be used to turn on
          # TLS certificate checks. As noted, it is insecure and shouldn't be used outside
          # of explorative phases.
          #
          insecureSkipVerify: true
          # When connecting to the server, connect using the ldap:// protocol then issue
          # a StartTLS command. If unspecified, connections will use the ldaps:// protocol
          #
          # startTLS: true
          # Path to a trusted root certificate file. Default: use the host's root CA.
          #rootCA: /etc/dex/ldap.ca
          # A raw certificate file can also be provided inline.
          #rootCAData:
          # The DN and password for an application service account. The connector uses
          # these credentials to search for users and groups. Not required if the LDAP
          # server provides access for anonymous auth.
          # Please note that if the bind password contains a `$`, it has to be saved in an
          # environment variable which should be given as the value to `bindPW`.
          # bindDN: kubernetes@kad.local
          # bindPW: cheiFaivainueph0udik

          # User search maps a username and password entered by a user to a LDAP entry.
          userSearch:
            # BaseDN to start the search from. It will translate to the query
            # "(&(objectClass=person)(uid=<username>))".
            baseDN: o=profiru
            # Optional filter to apply when searching the directory.
            # filter: "(objectClass=person)"
            # username attribute used for comparing user entries. This will be translated
            # and combine with the other filter as "(<attr>=<username>)".
            username: uid
            # The following three fields are direct mappings of attributes on the user entry.
            # String representation of the user.
            idAttr: uid
            # Required. Attribute to map to Email.
            emailAttr: uid
            # Maps to display name of users. No default value.
            nameAttr: uid

          # Group search queries for groups given a user entry.
          groupSearch:
            # BaseDN to start the search from. It will translate to the query
            # "(&(objectClass=group)(member=<user uid>))".
            baseDN: o=profiru
            # Optional filter to apply when searching the directory.
            # filter: "(objectClass=group)"
            # Following two fields are used to match a user to a group. It adds an additional
            # requirement to the filter that an attribute in the group must match the user's
            # attribute value.
            userAttr: uid
            groupAttr: aclgroups
            # Represents group name.
            nameAttr: cn
    oauth2:
      skipApprovalScreen: true

    staticClients:
    - id: loginapp
      redirectURIs:
      - 'https://login.k8s.shot.x340.org:32002/callback'
      name: 'Login Application'
      secret: 4TORGiNV9M54BTk1v7dNuFSaI6hUjfjr
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: kube-system
spec:
  type: NodePort
  ports:
    - name: dex
      port: 5556
      protocol: TCP
      targetPort: 5556
      nodePort: 32000
  selector:
    app: dex
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: dex
    spec:
      nodeSelector:
        dex: present
      tolerations:
        - key: "type"
          operator: "Equal"
          value: "balancer"
          effect: "NoSchedule"
      serviceAccountName: dex
      containers:
        - image: quay.io/coreos/dex:v2.9.0
          name: dex
          command: ["dex", "serve", "/etc/dex/cfg/config.yaml"]
          ports:
            - name: http
              containerPort: 5556
          volumeMounts:
            - name: config
              mountPath: /etc/dex/cfg
            - name: tls
              mountPath: /etc/dex/tls
      volumes:
        - name: config
          configMap:
            name: dex
            items:
              - key: config.yaml
                path: config.yaml
        - name: tls
          secret:
            secretName: dex.k8s.shot.x340.org.tls